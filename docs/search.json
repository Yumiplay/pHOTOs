{"version": "0.9.5", "fields": ["qualname", "fullname", "doc"], "ref": "fullname", "documentStore": {"docs": {"bitcoin_explorer": {"fullname": "bitcoin_explorer", "modulename": "bitcoin_explorer", "qualname": "", "type": "module", "doc": "<p>BitcoinQuery: Query Bitcoin Core Data Files As A Database.</p>\n\n<ol>\n<li><p>How to install?</p>\n\n<ul>\n<li><code>pip install bitcoin-explorer</code></li>\n</ul></li>\n<li><p>How to use?</p>\n\n<ul>\n<li>Download Bitcoin Core app from bitcoin official website.</li>\n<li>Sync full Bitcoin data.</li>\n<li>If you wish to query transaction with txid (i.e. transaction id),\nrun Bitcoin Core or <code>bitcoind</code> with flag <code>--txindex=1</code>,\nor rerun Bitcoin Core with <code>--reindex --txindex=1</code>.</li>\n<li>After having the Bitcoin blockchain data, shutdown Bitcoin Core\nor <code>bitcoind</code>. This program cannot run concurrently with\nBitcoin Core.</li>\n<li>Open <code>python</code>, import the package, and instantiate <code>BitcoinDB</code>.</li>\n</ul></li>\n</ol>\n"}, "bitcoin_explorer.BitcoinDB": {"fullname": "bitcoin_explorer.BitcoinDB", "modulename": "bitcoin_explorer", "qualname": "BitcoinDB", "type": "class", "doc": "<p>Query bitcoin core like a database.</p>\n"}, "bitcoin_explorer.BitcoinDB.__init__": {"fullname": "bitcoin_explorer.BitcoinDB.__init__", "modulename": "bitcoin_explorer", "qualname": "BitcoinDB.__init__", "type": "function", "doc": "<p>Instantiate this class to query bitcoin core files.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<blockquote>\n  <p>Pass the bitcoin directory to the argument, wait for\n  the program to read the block index, and possibly transaction\n  index. This should take a few seconds.</p>\n  \n  <p>Caveat: instantiating the class with tx_index=True\n  will hold the LOCK of txindex levelDB, thus preventing\n  another instance to use the transaction ID query related\n  APIs. Although the other APIs will work just fine.\n  Multiple instances of the class should work properly,\n  which can be used for parallel programming, and thus\n  increasing processing speed.</p>\n  \n  <p>However, it is important to know that, <strong>during the starting\n  period of BitcoinDB object, it locks the block index levelDB,\n  which would make another BitcoinDB object fail to instantiate\n  at the same time.</strong> If multiple instances of BitcoinDB objects\n  are needed, they must wait for the other instance to finish\n  reading the levelDB.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code># import package\nimport bitcoin_explorer as bq\n\n# launch bitcoinDB\ndb = bq.BitcoinDB(\"/Users/me/Bitcoin\", tx_index=True)\n\n# query block information of height 10000\nblock = db.get_block(10000)\nprint(block[\"txdata\"])\n</code></pre>\n</blockquote>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>path:</strong>  the same as bitcoin core <code>--datadir</code> as path argument.</li>\n<li><strong>tx_index (bool):</strong>  if your <code>Bitcoin Core</code> is launched with\n<code>--txindex=1</code>, you may set <code>tx_index=True</code> to query\ntransactions with <code>txid</code> (transaction id).\nWhen this is set to <code>True</code>, BitcoinDB will attempt to\nopen the levelDB in <code>indexes/txindex</code> directory,\nand will print a warning if it fails to open.</li>\n</ul>\n", "parameters": ["self", "path", "tx_index"], "funcdef": "def"}, "bitcoin_explorer.BitcoinDB.get_max_height": {"fullname": "bitcoin_explorer.BitcoinDB.get_max_height", "modulename": "bitcoin_explorer", "qualname": "BitcoinDB.get_max_height", "type": "function", "doc": "<p>Get the maximum height found in block data directory.</p>\n\n<p>Returns: max height in block index.</p>\n", "parameters": ["self"], "funcdef": "def"}, "bitcoin_explorer.BitcoinDB.get_block": {"fullname": "bitcoin_explorer.BitcoinDB.get_block", "modulename": "bitcoin_explorer", "qualname": "BitcoinDB.get_block", "type": "function", "doc": "<p>Get the block of a specific height.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<blockquote>\n  <p>To get addresses of inputs, set connected to <code>True</code>.</p>\n  \n  <p>However, tracing block inputs in this manner requires\n  extensive query to txindex levelDB, and random reading\n  of disk, which is too slow. It takes several seconds\n  to get just one big block (i.e., blocks with 1 thousand\n  or more transactions) if connected is set to <code>True</code>.</p>\n  \n  <p>The best way to retrieve a large number of input addresses\n  (may be for the whole blockchain) is to retrieve blocks\n  in sequential order using the <code>get_block_iter_range()</code>\n  method, and set <code>connected=True</code>, which is almost as fast\n  as <code>connected=False</code>.\n  ``</p>\n</blockquote>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>height:</strong>  the height of the block.</li>\n<li><strong>simplify:</strong>  whether to use simpler format, (i.e., discard\nwitness program, script public hash, etc.), which makes\nparsing to python objects lot faster.</li>\n<li><strong>connected:</strong>  whether to replace inputs by related previous outputs.</li>\n</ul>\n\n<p>Returns: block data, or error if the height is not yet synced.<